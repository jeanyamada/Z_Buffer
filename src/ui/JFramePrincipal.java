/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Color;
import objects3D.Casa;
import objects3D.Cone;
import objects3D.Cubo;
import objects3D.MalhaPoligno;
import objects3D.Object3D;
import objects3D.Paraboloide;
import objects3D.Plano;
import objects3D.Poligno;
import objects3D.Rampa;
import objects3D.Sphere;
import points.Point3D;
import transformacao.Transformacao;

/**
 *
 * @author jean
 */
public class JFramePrincipal extends javax.swing.JFrame {

    private JPanelDraw jPanelDraw;

    /**
     * Creates new form JFramePrincipal
     */
    public JFramePrincipal() {
        initComponents();
        jPanelDraw = new JPanelDraw(1024, 1024);
        jScrollPane1.setViewportView(jPanelDraw);
        jPanelDraw.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupTranf = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jCheckBoxRotacao = new javax.swing.JCheckBox();
        jCheckBoxTranslacao = new javax.swing.JCheckBox();
        jCheckBoxY = new javax.swing.JCheckBox();
        jCheckBoxX = new javax.swing.JCheckBox();
        jCheckBoxZ = new javax.swing.JCheckBox();
        jFormattedTextFieldX = new javax.swing.JFormattedTextField();
        jFormattedTextFieldY = new javax.swing.JFormattedTextField();
        jFormattedTextFieldZ = new javax.swing.JFormattedTextField();
        jButtonT = new javax.swing.JButton();
        jCheckBoxEscala = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuObjeto = new javax.swing.JMenu();
        jMenuItemEsfera = new javax.swing.JMenuItem();
        jMenuItemParab = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItemPlano = new javax.swing.JMenuItem();
        jMenuItemCubo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemCasa = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        jScrollPane1.setDoubleBuffered(true);

        jCheckBoxRotacao.setText("rotação");

        jCheckBoxTranslacao.setText("translação");

        jCheckBoxY.setText("Y");
        jCheckBoxY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxYActionPerformed(evt);
            }
        });

        jCheckBoxX.setText("X");
        jCheckBoxX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxXActionPerformed(evt);
            }
        });

        jCheckBoxZ.setText("Z");
        jCheckBoxZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxZActionPerformed(evt);
            }
        });

        jFormattedTextFieldX.setEnabled(false);

        jFormattedTextFieldY.setEnabled(false);

        jFormattedTextFieldZ.setEnabled(false);

        jButtonT.setText("transformar");
        jButtonT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTActionPerformed(evt);
            }
        });

        jCheckBoxEscala.setText("escala");

        jMenuObjeto.setText("Objetos3D");

        jMenuItemEsfera.setText("esfera");
        jMenuItemEsfera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEsferaActionPerformed(evt);
            }
        });
        jMenuObjeto.add(jMenuItemEsfera);

        jMenuItemParab.setText("cone");
        jMenuItemParab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemParabActionPerformed(evt);
            }
        });
        jMenuObjeto.add(jMenuItemParab);

        jMenuItem3.setText("paraboloide");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenuObjeto.add(jMenuItem3);

        jMenuItemPlano.setText("plano");
        jMenuItemPlano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPlanoActionPerformed(evt);
            }
        });
        jMenuObjeto.add(jMenuItemPlano);

        jMenuItemCubo.setText("cubo");
        jMenuItemCubo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCuboActionPerformed(evt);
            }
        });
        jMenuObjeto.add(jMenuItemCubo);

        jMenuBar1.add(jMenuObjeto);

        jMenu2.setText("MalhaPolignos");

        jMenuItemCasa.setText("Casa");
        jMenuItemCasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCasaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemCasa);

        jMenuItem1.setText("Rampa");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jFormattedTextFieldX, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxX, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckBoxY, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jFormattedTextFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckBoxZ, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jFormattedTextFieldZ, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addComponent(jCheckBoxEscala, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxRotacao)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxTranslacao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonT)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCheckBoxX)
                        .addComponent(jCheckBoxY)
                        .addComponent(jCheckBoxZ)
                        .addComponent(jButtonT))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCheckBoxEscala)
                        .addComponent(jCheckBoxRotacao))
                    .addComponent(jCheckBoxTranslacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextFieldZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemEsferaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEsferaActionPerformed
        // TODO add your handling code here:

        Sphere s = new Sphere(30, new Point3D(100, 50, 20), Color.GREEN, Color.BLACK);

        s.create();

        for (Point3D x : s.getPoints()) {
            Transformacao.escalaX(x, 0.5, s.getOrigin());
            Transformacao.escalaY(x, 0.5, s.getOrigin());
            Transformacao.escalaZ(x, 0.5, s.getOrigin());
        }
        jPanelDraw.getScreen().getObjects3D().add(s);
        jPanelDraw.getProjection().startProjectionObj3D(s);
        jPanelDraw.start();
    }//GEN-LAST:event_jMenuItemEsferaActionPerformed

    private void jMenuItemParabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemParabActionPerformed
        // TODO add your handling code here:
        Cone c = new Cone(50, new Point3D(30, 50, 10), Color.BLUE, Color.WHITE);

        c.create();

        for (Point3D x : c.getPoints()) {
            Transformacao.escalaX(x, 0.5, c.getOrigin());
            Transformacao.escalaY(x, 0.5, c.getOrigin());
            Transformacao.escalaZ(x, 0.5, c.getOrigin());
        }
        jPanelDraw.getScreen().getObjects3D().add(c);
        jPanelDraw.getProjection().startProjectionObj3D(c);
        jPanelDraw.start();

    }//GEN-LAST:event_jMenuItemParabActionPerformed

    private void jCheckBoxYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxYActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxY.isSelected()) {
            jFormattedTextFieldY.setEnabled(true);
        } else {
            jFormattedTextFieldY.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxYActionPerformed

    private void jCheckBoxXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxXActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxX.isSelected()) {
            jFormattedTextFieldX.setEnabled(true);
        } else {
            jFormattedTextFieldX.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxXActionPerformed

    private void jCheckBoxZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxZActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxZ.isSelected()) {
            jFormattedTextFieldZ.setEnabled(true);
        } else {
            jFormattedTextFieldZ.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxZActionPerformed

    private void jButtonTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTActionPerformed
        // TODO add your handling code here:
        for (Object3D obj : jPanelDraw.getScreen().getObjects3D()) {
            if (obj instanceof Poligno == false) {
                if (jCheckBoxTranslacao.isSelected()) {

                    if (jCheckBoxX.isSelected()) {

                        try {
                            double t = Double.parseDouble(jFormattedTextFieldX.getText());

                            for (Point3D p : obj.getPoints()) {

                                Transformacao.translacaoX(p, t);
                            }

                        } catch (NumberFormatException e) {

                        }
                    }

                    if (jCheckBoxY.isSelected()) {

                        try {
                            double t = Double.parseDouble(jFormattedTextFieldY.getText());

                            for (Point3D p : obj.getPoints()) {
                                Transformacao.translacaoY(p, t);
                            }

                        } catch (NumberFormatException e) {

                        }
                    }

                    if (jCheckBoxZ.isSelected()) {

                        try {
                            double t = Double.parseDouble(jFormattedTextFieldZ.getText());

                            for (Point3D p : obj.getPoints()) {
                                Transformacao.translacaoZ(p, t);
                            }

                        } catch (NumberFormatException e) {

                        }
                    }

                }

                if (jCheckBoxEscala.isSelected()) {

                    if (jCheckBoxX.isSelected()) {

                        try {
                            double t = Double.parseDouble(jFormattedTextFieldX.getText());

                            for (Point3D p : obj.getPoints()) {
                                Transformacao.escalaX(p, t, obj.getOrigin());
                            }

                        } catch (NumberFormatException e) {

                        }
                    }

                    if (jCheckBoxY.isSelected()) {

                        try {
                            double t = Double.parseDouble(jFormattedTextFieldY.getText());

                            for (Point3D p : obj.getPoints()) {
                                Transformacao.escalaY(p, t, obj.getOrigin());
                            }

                        } catch (NumberFormatException e) {

                        }
                    }

                    if (jCheckBoxZ.isSelected()) {

                        try {
                            double t = Double.parseDouble(jFormattedTextFieldZ.getText());

                            for (Point3D p : obj.getPoints()) {
                                Transformacao.escalaZ(p, t, obj.getOrigin());
                            }

                        } catch (NumberFormatException e) {

                        }
                    }

                }

                if (jCheckBoxRotacao.isSelected()) {

                    if (jCheckBoxX.isSelected()) {

                        try {
                            double t = Double.parseDouble(jFormattedTextFieldX.getText());

                            for (Point3D p : obj.getPoints()) {
                                Transformacao.rotacaoX(p, t, obj.getOrigin());
                            }

                        } catch (NumberFormatException e) {

                        }
                    }

                    if (jCheckBoxY.isSelected()) {

                        try {
                            double t = Double.parseDouble(jFormattedTextFieldY.getText());

                            for (Point3D p : obj.getPoints()) {
                                Transformacao.rotacaoY(p, t, obj.getOrigin());
                            }

                        } catch (NumberFormatException e) {

                        }
                    }

                    if (jCheckBoxZ.isSelected()) {

                        try {
                            double t = Double.parseDouble(jFormattedTextFieldZ.getText());

                            for (Point3D p : obj.getPoints()) {
                                Transformacao.rotacaoZ(p, t, obj.getOrigin());
                            }

                        } catch (NumberFormatException e) {

                        }
                    }

                }
            }
        }

        for (MalhaPoligno obj : jPanelDraw.getScreen().getmL()) {

            if (jCheckBoxTranslacao.isSelected()) {

                if (jCheckBoxX.isSelected()) {

                    try {
                        double t = Double.parseDouble(jFormattedTextFieldX.getText());

                        for (Point3D p : obj.getPoints()) {

                            Transformacao.translacaoX(p, t);
                        }

                    } catch (NumberFormatException e) {

                    }
                }

                if (jCheckBoxY.isSelected()) {

                    try {
                        double t = Double.parseDouble(jFormattedTextFieldY.getText());

                        for (Point3D p : obj.getPoints()) {
                            Transformacao.translacaoY(p, t);
                        }

                    } catch (NumberFormatException e) {

                    }
                }

                if (jCheckBoxZ.isSelected()) {

                    try {
                        double t = Double.parseDouble(jFormattedTextFieldZ.getText());

                        for (Point3D p : obj.getPoints()) {
                            Transformacao.translacaoZ(p, t);
                        }

                    } catch (NumberFormatException e) {

                    }
                }

            }

            if (jCheckBoxEscala.isSelected()) {

                if (jCheckBoxX.isSelected()) {

                    try {
                        double t = Double.parseDouble(jFormattedTextFieldX.getText());

                        for (Point3D p : obj.getPoints()) {
                            Transformacao.escalaX(p, t, obj.getOrigin());
                        }

                    } catch (NumberFormatException e) {

                    }
                }

                if (jCheckBoxY.isSelected()) {

                    try {
                        double t = Double.parseDouble(jFormattedTextFieldY.getText());

                        for (Point3D p : obj.getPoints()) {
                            Transformacao.escalaY(p, t, obj.getOrigin());
                        }

                    } catch (NumberFormatException e) {

                    }
                }

                if (jCheckBoxZ.isSelected()) {

                    try {
                        double t = Double.parseDouble(jFormattedTextFieldZ.getText());

                        for (Point3D p : obj.getPoints()) {
                            Transformacao.escalaZ(p, t, obj.getOrigin());
                        }

                    } catch (NumberFormatException e) {

                    }
                }

            }

            if (jCheckBoxRotacao.isSelected()) {

                if (jCheckBoxX.isSelected()) {

                    try {
                        double t = Double.parseDouble(jFormattedTextFieldX.getText());

                        for (Point3D p : obj.getPoints()) {
                            Transformacao.rotacaoX(p, t, obj.getOrigin());
                        }

                    } catch (NumberFormatException e) {

                    }
                }

                if (jCheckBoxY.isSelected()) {

                    try {
                        double t = Double.parseDouble(jFormattedTextFieldY.getText());

                        for (Point3D p : obj.getPoints()) {
                            Transformacao.rotacaoY(p, t, obj.getOrigin());
                        }

                    } catch (NumberFormatException e) {

                    }
                }

                if (jCheckBoxZ.isSelected()) {

                    try {
                        double t = Double.parseDouble(jFormattedTextFieldZ.getText());

                        for (Point3D p : obj.getPoints()) {
                            Transformacao.rotacaoZ(p, t, obj.getOrigin());
                        }

                    } catch (NumberFormatException e) {

                    }
                }

            }

        }
        jPanelDraw.start();
    }//GEN-LAST:event_jButtonTActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        Paraboloide p = new Paraboloide(new Point3D(0, 0, 0), Color.BLUE, Color.WHITE);

        p.create();

        for (Point3D x : p.getPoints()) {
            Transformacao.escalaX(x, 0.5, p.getOrigin());
            Transformacao.escalaY(x, 0.5, p.getOrigin());
            Transformacao.escalaZ(x, 0.5, p.getOrigin());
        }
        jPanelDraw.getScreen().getObjects3D().add(p);
        jPanelDraw.getProjection().startProjectionObj3D(p);
        jPanelDraw.start();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItemPlanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPlanoActionPerformed
        // TODO add your handling code here:
        Plano p = new Plano(new Point3D(0, 0, 0), Color.RED, Color.WHITE);

        p.create();

        for (Point3D x : p.getPoints()) {
            Transformacao.escalaX(x, 0.5, p.getOrigin());
            Transformacao.escalaY(x, 0.5, p.getOrigin());
            Transformacao.escalaZ(x, 0.5, p.getOrigin());
        }

        jPanelDraw.getScreen().getObjects3D().add(p);
        jPanelDraw.getProjection().startProjectionObj3D(p);
        jPanelDraw.start();
    }//GEN-LAST:event_jMenuItemPlanoActionPerformed

    private void jMenuItemCuboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCuboActionPerformed
        // TODO add your handling code here:
        Cubo c = new Cubo(new Point3D(0, 0, 0), Color.GRAY, Color.WHITE);

        c.create();

        for (Point3D x : c.getPoints()) {
            Transformacao.escalaX(x, 0.5, c.getOrigin());
            Transformacao.escalaY(x, 0.5, c.getOrigin());
            Transformacao.escalaZ(x, 0.5, c.getOrigin());
        }

        jPanelDraw.getScreen().getObjects3D().add(c);
        jPanelDraw.getProjection().startProjectionObj3D(c);
        jPanelDraw.start();
    }//GEN-LAST:event_jMenuItemCuboActionPerformed

    private void jMenuItemCasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCasaActionPerformed
        // TODO add your handling code here:
        Casa c = new Casa();
        jPanelDraw.getScreen().getmL().add(c);
        c.create(jPanelDraw.getScreen().getObjects3D());
        jPanelDraw.getProjection().startProjectionMalha(c);
        jPanelDraw.start();

    }//GEN-LAST:event_jMenuItemCasaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        Rampa r = new Rampa();
        jPanelDraw.getScreen().getmL().add(r);
        r.create(jPanelDraw.getScreen().getObjects3D());
        jPanelDraw.getProjection().startProjectionMalha(r);
        jPanelDraw.start();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupTranf;
    private javax.swing.JButton jButtonT;
    private javax.swing.JCheckBox jCheckBoxEscala;
    private javax.swing.JCheckBox jCheckBoxRotacao;
    private javax.swing.JCheckBox jCheckBoxTranslacao;
    private javax.swing.JCheckBox jCheckBoxX;
    private javax.swing.JCheckBox jCheckBoxY;
    private javax.swing.JCheckBox jCheckBoxZ;
    private javax.swing.JFormattedTextField jFormattedTextFieldX;
    private javax.swing.JFormattedTextField jFormattedTextFieldY;
    private javax.swing.JFormattedTextField jFormattedTextFieldZ;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItemCasa;
    private javax.swing.JMenuItem jMenuItemCubo;
    private javax.swing.JMenuItem jMenuItemEsfera;
    private javax.swing.JMenuItem jMenuItemParab;
    private javax.swing.JMenuItem jMenuItemPlano;
    private javax.swing.JMenu jMenuObjeto;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
